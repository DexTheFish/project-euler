/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

*/

// First Impression:
// terms are generally distinct. For the 5 x 5 sample above, we see that the only repeat comes from 2 ** 4 = 4 ** 2. In this case the bases share the same set of prime factors. Similarly we have:
// 2 ** 6 = 4 ** 3
// 2 ** 8 = 4 ** 4 = 8 ** 2.

// continuing this pattern we find all of the duplicates involving bases of the form 2 ** n. Similarly we get patterns like:
// 3 ** 4 = 9 ** 2
// 3 ** 6 = 9 ** 3
// 3 ** 8 = 9 ** 4 = 27 ** 2

// it doesn't only work for primes:

// 6 ** 4 = 36 ** 2
// 6 ** 6 = 36 ** 3
// 6 ** 8 = 36 ** 4 = 1296 ** 2

// what about other composites like 2 x 3 x 5 and 2 x 2 x 3? Studying them will probably fill out the picture.

// the above suggests that we might succeed with this strategy:

// 1. count the total number of terms (99 x 99)
// 2. cleverly count the number of duplicates associated with each base
// 3. subtract the number of duplicates from the total count

// what about a more direct approach? Can we use BigInt to actually compute huge numbers like 99 ** 99? Let's check.

const computeBigPower = (n, m) => {
  let base = BigInt(n);
  let result = BigInt(1);
  for (let i = 0; i < m; i++) {
    result = result * base;
  }
  return result;
};

// the function actually works. Maybe we can use it to actually resolve the question.

const answer = () => {
  let terms = [];
  for (let a = 2; a <= 100; a++) {
    for (let b = 2; b <= 100; b++) {
      terms.push(String(computeBigPower(a, b)));
    }
  }
  let filteredTerms = terms
    .sort()
    .filter((val, index, arr) => arr[index] != arr[index - 1]);
  return filteredTerms.length;
};

console.log(answer());

// this problem demonstrates the computer's ability to perform lots of arithmetic on large numbers as long as we use BigInt. However there is still a lot to be learned from the problem by exploring the analytical solution indicated by the First Impression comments.
